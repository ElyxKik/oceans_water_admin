import { useEffect, useState } from 'react';
import clientService from '../services/clientService';
import { Modal, Button, Form, Alert } from 'react-bootstrap';

const styles = {
  container: {
    padding: '20px',
    backgroundColor: '#fff',
    borderRadius: '8px',
    boxShadow: '0 2px 4px rgba(0,0,0,0.1)',
    margin: '20px 0'
  },
  title: {
    fontSize: '1.5rem',
    fontWeight: '600',
    marginBottom: '1.5rem',
    color: '#2c3e50'
  },
  searchRow: {
    display: 'flex',
    gap: '10px',
    marginBottom: '20px',
    flexWrap: 'wrap'
  },
  input: {
    padding: '8px 12px',
    border: '1px solid #ddd',
    borderRadius: '4px',
    flex: '1',
    minWidth: '200px'
  },
  table: {
    width: '100%',
    borderCollapse: 'collapse'
  },
  th: {
    backgroundColor: '#f8f9fa',
    padding: '10px',
    border: '1px solid #eee',
    textAlign: 'left'
  },
  td: {
    padding: '10px',
    border: '1px solid #eee'
  },
  error: {
    color: '#e74c3c',
    marginBottom: '10px'
  },
  loading: {
    padding: '20px',
    textAlign: 'center'
  },
  actions: {
    display: 'flex',
    gap: '5px',
    justifyContent: 'flex-end'
  },
  actionButton: {
    padding: '5px 10px',
    borderRadius: '4px',
    cursor: 'pointer',
    border: 'none',
    fontSize: '0.85rem'
  },
  viewButton: {
    backgroundColor: '#3498db',
    color: 'white'
  },
  editButton: {
    backgroundColor: '#f39c12',
    color: 'white'
  },
  deleteButton: {
    backgroundColor: '#e74c3c',
    color: 'white'
  },
  modalLabel: {
    fontWeight: 'bold',
    marginBottom: '5px'
  },
  modalValue: {
    marginBottom: '15px'
  }
};

export default function Clients() {
  const [clients, setClients] = useState([]);
  const [search, setSearch] = useState('');
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  
  // √âtats pour les modals
  const [viewModal, setViewModal] = useState(false);
  const [editModal, setEditModal] = useState(false);
  const [deleteModal, setDeleteModal] = useState(false);
  const [selectedClient, setSelectedClient] = useState(null);
  const [actionLoading, setActionLoading] = useState(false);
  const [actionError, setActionError] = useState(null);
  const [actionSuccess, setActionSuccess] = useState(null);
  
  // √âtats pour l'√©dition
  const [editForm, setEditForm] = useState({
    first_name: '',
    last_name: '',
    email: '',
    is_active: true
  });

  const fetchClients = async () => {
    setLoading(true);
    setError(null);
    try {
      // Param√®tres de recherche
      const params = {};
      if (search) params.search = search;
      
      // R√©cup√©rer tous les utilisateurs
      const data = await clientService.getAllClients(1, params);
      
      // Traitement des donn√©es
      let fetched = [];
      if (data && data.results) {
        fetched = Array.isArray(data.results) ? data.results : [];
      } else if (Array.isArray(data)) {
        fetched = data;
      }
      
      // Filtrer pour ne garder que les utilisateurs avec le r√¥le 'client'
      fetched = fetched.filter(user => user.role === 'client');
      
      // Filtrage suppl√©mentaire si recherche
      if (search) {
        const term = search.toLowerCase();
        fetched = fetched.filter(c => {
          return [c.username, c.email, c.first_name, c.last_name]
            .filter(Boolean)
            .some(v => v.toLowerCase().includes(term));
        });
      }
      setClients(fetched);
    } catch (err) {
      console.error('Erreur chargement clients:', err);
      setError('Impossible de charger les clients');
    } finally {
      setLoading(false);
    }
  };

  // Fonctions de gestion des actions
  const handleView = (client) => {
    setSelectedClient(client);
    setViewModal(true);
  };

  const handleEdit = (client) => {
    setSelectedClient(client);
    setEditForm({
      first_name: client.first_name || '',
      last_name: client.last_name || '',
      email: client.email || '',
      is_active: client.is_active
    });
    setEditModal(true);
  };

  const handleDelete = (client) => {
    setSelectedClient(client);
    setDeleteModal(true);
  };

  const handleEditSubmit = async (e) => {
    e.preventDefault();
    if (!selectedClient) return;
    
    setActionLoading(true);
    setActionError(null);
    setActionSuccess(null);
    
    try {
      await clientService.updateClient(selectedClient.id, editForm);
      setActionSuccess('Client mis √† jour avec succ√®s');
      fetchClients(); // Rafra√Æchir la liste
      setTimeout(() => {
        setEditModal(false);
        setActionSuccess(null);
      }, 1500);
    } catch (err) {
      console.error('Erreur lors de la mise √† jour du client:', err);
      setActionError('Erreur lors de la mise √† jour du client');
    } finally {
      setActionLoading(false);
    }
  };

  const handleDeleteConfirm = async () => {
    if (!selectedClient) return;
    
    setActionLoading(true);
    setActionError(null);
    setActionSuccess(null);
    
    try {
      await clientService.deactivateClient(selectedClient.id);
      setActionSuccess('Client d√©sactiv√© avec succ√®s');
      fetchClients(); // Rafra√Æchir la liste
      setTimeout(() => {
        setDeleteModal(false);
        setActionSuccess(null);
      }, 1500);
    } catch (err) {
      console.error('Erreur lors de la d√©sactivation du client:', err);
      setActionError('Erreur lors de la d√©sactivation du client');
    } finally {
      setActionLoading(false);
    }
  };

  const handleActivateClient = async (clientId) => {
    setActionLoading(true);
    setActionError(null);
    setActionSuccess(null);
    
    try {
      await clientService.activateClient(clientId);
      setActionSuccess('Client activ√© avec succ√®s');
      fetchClients(); // Rafra√Æchir la liste
    } catch (err) {
      console.error('Erreur lors de l\'activation du client:', err);
      setActionError('Erreur lors de l\'activation du client');
    } finally {
      setActionLoading(false);
    }
  };

  useEffect(() => { fetchClients(); }, [search]);

  return (
    <div style={styles.container}>
      <h2 style={styles.title}>üë• Gestion des Clients</h2>
      {error && <p style={styles.error}>{error}</p>}
      {actionSuccess && <Alert variant="success">{actionSuccess}</Alert>}
      {actionError && <Alert variant="danger">{actionError}</Alert>}

      <div style={styles.searchRow}>
        <input
          value={search}
          onChange={(e) => setSearch(e.target.value)}
          placeholder="Rechercher‚Ä¶"
          style={styles.input}
        />
      </div>
      {loading ? (
        <div style={styles.loading}>Chargement‚Ä¶</div>
      ) : (
        <table style={styles.table}>
          <thead>
            <tr>
              <th style={styles.th}>ID</th>
              <th style={styles.th}>Nom</th>
              <th style={styles.th}>Email</th>
              <th style={styles.th}>Actif</th>
              <th style={styles.th}>Actions</th>
            </tr>
          </thead>
          <tbody>
            {clients.map((c) => (
              <tr key={c.id}>
                <td style={styles.td}>{c.id}</td>
                <td style={styles.td}>{clientService.formatClientName(c)}</td>
                <td style={styles.td}>{c.email}</td>
                <td style={styles.td}>{c.is_active ? '‚úÖ' : '‚ùå'}</td>
                <td style={{...styles.td, ...styles.actions}}>
                  <button 
                    onClick={() => handleView(c)} 
                    style={{...styles.actionButton, ...styles.viewButton}}
                  >
                    Voir
                  </button>
                  <button 
                    onClick={() => handleEdit(c)} 
                    style={{...styles.actionButton, ...styles.editButton}}
                  >
                    Modifier
                  </button>
                  {c.is_active ? (
                    <button 
                      onClick={() => handleDelete(c)} 
                      style={{...styles.actionButton, ...styles.deleteButton}}
                    >
                      D√©sactiver
                    </button>
                  ) : (
                    <button 
                      onClick={() => handleActivateClient(c.id)} 
                      style={{...styles.actionButton, backgroundColor: '#27ae60', color: 'white'}}
                    >
                      Activer
                    </button>
                  )}
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      )}

      {/* Modal de visualisation */}
      <Modal show={viewModal} onHide={() => setViewModal(false)}>
        <Modal.Header closeButton>
          <Modal.Title>D√©tails du client</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          {selectedClient && (
            <div>
              <div>
                <p style={styles.modalLabel}>ID:</p>
                <p style={styles.modalValue}>{selectedClient.id}</p>
              </div>
              <div>
                <p style={styles.modalLabel}>Nom d'utilisateur:</p>
                <p style={styles.modalValue}>{selectedClient.username}</p>
              </div>
              <div>
                <p style={styles.modalLabel}>Nom complet:</p>
                <p style={styles.modalValue}>{clientService.formatClientName(selectedClient)}</p>
              </div>
              <div>
                <p style={styles.modalLabel}>Email:</p>
                <p style={styles.modalValue}>{selectedClient.email}</p>
              </div>
              <div>
                <p style={styles.modalLabel}>Statut:</p>
                <p style={styles.modalValue}>{selectedClient.is_active ? 'Actif' : 'Inactif'}</p>
              </div>
              <div>
                <p style={styles.modalLabel}>Date d'inscription:</p>
                <p style={styles.modalValue}>{new Date(selectedClient.date_joined).toLocaleDateString()}</p>
              </div>
            </div>
          )}
        </Modal.Body>
        <Modal.Footer>
          <Button variant="secondary" onClick={() => setViewModal(false)}>
            Fermer
          </Button>
        </Modal.Footer>
      </Modal>

      {/* Modal de modification */}
      <Modal show={editModal} onHide={() => setEditModal(false)}>
        <Modal.Header closeButton>
          <Modal.Title>Modifier le client</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          {actionError && <Alert variant="danger">{actionError}</Alert>}
          {actionSuccess && <Alert variant="success">{actionSuccess}</Alert>}
          
          <Form onSubmit={handleEditSubmit}>
            <Form.Group className="mb-3">
              <Form.Label>Pr√©nom</Form.Label>
              <Form.Control 
                type="text" 
                value={editForm.first_name} 
                onChange={(e) => setEditForm({...editForm, first_name: e.target.value})}
              />
            </Form.Group>
            
            <Form.Group className="mb-3">
              <Form.Label>Nom</Form.Label>
              <Form.Control 
                type="text" 
                value={editForm.last_name} 
                onChange={(e) => setEditForm({...editForm, last_name: e.target.value})}
              />
            </Form.Group>
            
            <Form.Group className="mb-3">
              <Form.Label>Email</Form.Label>
              <Form.Control 
                type="email" 
                value={editForm.email} 
                onChange={(e) => setEditForm({...editForm, email: e.target.value})}
              />
            </Form.Group>
            
            <Form.Group className="mb-3">
              <Form.Check 
                type="checkbox" 
                label="Actif" 
                checked={editForm.is_active} 
                onChange={(e) => setEditForm({...editForm, is_active: e.target.checked})}
              />
            </Form.Group>
            
            <div className="d-flex justify-content-end gap-2">
              <Button variant="secondary" onClick={() => setEditModal(false)}>
                Annuler
              </Button>
              <Button variant="primary" type="submit" disabled={actionLoading}>
                {actionLoading ? 'Enregistrement...' : 'Enregistrer'}
              </Button>
            </div>
          </Form>
        </Modal.Body>
      </Modal>

      {/* Modal de suppression */}
      <Modal show={deleteModal} onHide={() => setDeleteModal(false)}>
        <Modal.Header closeButton>
          <Modal.Title>D√©sactiver le client</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          {actionError && <Alert variant="danger">{actionError}</Alert>}
          {actionSuccess && <Alert variant="success">{actionSuccess}</Alert>}
          
          {selectedClient && (
            <p>√ätes-vous s√ªr de vouloir d√©sactiver le client {clientService.formatClientName(selectedClient)} ?</p>
          )}
        </Modal.Body>
        <Modal.Footer>
          <Button variant="secondary" onClick={() => setDeleteModal(false)}>
            Annuler
          </Button>
          <Button 
            variant="danger" 
            onClick={handleDeleteConfirm} 
            disabled={actionLoading}
          >
            {actionLoading ? 'D√©sactivation...' : 'D√©sactiver'}
          </Button>
        </Modal.Footer>
      </Modal>
    </div>
  );
}
